#include <iostream>
#include <random>
using namespace std;

// function to heapify the tree
void heapify(int arr[], int n, int root)
{
    int largest = root;  // Initialize largest as root
    int left = 2*root + 1;  // left = 2*i + 1
    int right = 2*root + 2;  // right = 2*i + 2

    // If left child is larger than root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // If right child is larger than largest so far
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If largest is not root
    if (largest != root) {
        swap(arr[root], arr[largest]);

        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
}

// implementing heap sort
void heapSort(int arr[], int n)
{
    // build heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // extracting elements from heap one by one
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        swap(arr[0], arr[i]);

        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

/* print contents of array */
void displayArray(int arr[], int n)
{
    for (int i=0; i<n; ++i)
        cout << arr[i] << " ";
    cout << "\n";
}

// main program
int main()
{
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    // allocate memory for array
    int *heap_arr = new int[n];

    // read input from user or assign random values
    string input_method;
    cout << "Enter 'U' to input values or 'R' to generate random values: ";
    cin >> input_method;

    if (input_method == "U") {
        // read input values from user
        cout << "Enter " << n << " values: ";
        for (int i = 0; i < n; i++) {
            cin >> heap_arr[i];
        }
    }
    else {
        // generate random values
        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<int> distrib(1, 1000);
        for (int i = 0; i < n; i++) {
            heap_arr[i] = distrib(gen);
        }
    }

    cout << "Input array:" << endl;
    displayArray(heap_arr, n);

    heapSort(heap_arr, n);

    cout << "Sorted array:" << endl;
    displayArray(heap_arr, n);

    // free memory allocated for array
    delete[] heap_arr;

    return 0;
}

